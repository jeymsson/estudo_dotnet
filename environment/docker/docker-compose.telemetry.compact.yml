# Usage:
# docker compose --profile otel-all up -d
# docker compose --profile otel-prometheus up -d
# docker compose --profile otel-grafana up -d
# docker compose --profile otel-jaeger up -d

services:
  otel-collector:
    container_name: otel-collector
    hostname: otel-collector
    image: otel/opentelemetry-collector-contrib:0.113.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../config/otel.yml:/etc/otel-collector-config.yaml
    restart: unless-stopped
    environment:
      - OTELCOL_LOG_LEVEL=debug
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver
      - "9200:55679"  # zpages
      - "13133:13133" # health_check extension
    #   - "14250:14250" # jaeger receiver
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-prometheus
      - otel-grafana
      - otel-jaeger

  blackbox:
    # https://github.com/prometheus/blackbox_exporter/releases
    image: prom/blackbox-exporter:v0.25.0
    container_name: blackbox
    restart: unless-stopped
    ports:
      - 9115:9115
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../config/blackbox.yml:/etc/blackbox/blackbox.yml
    command: --config.file=/etc/blackbox/blackbox.yml
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-prometheus

  prometheus:
    # https://github.com/prometheus/prometheus/releases
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    depends_on:
      blackbox:
        condition: "service_started"
        required: false
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-prometheus

  # Tempo runs as user 10001, and docker compose creates the volume as root. As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:2.6.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    profiles:
      - otel-all
      - otel-grafana

  tempo:
    # https://github.com/grafana/tempo/releases
    image: *tempoImage
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../config/tempo.yml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    restart: unless-stopped
    ports:
      - 3200:3200  # tempo
      - 4007:4317  # otlp grpc
    depends_on:
      - otel-collector
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-grafana

  loki:
    # https://github.com/grafana/loki/releases
    image: grafana/loki:3.2.1
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../config/loki.yml:/etc/loki/local-config.yaml
      - loki:/data/loki
    restart: unless-stopped
    ports:
      - 3100:3100
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-grafana

  grafana:
    # https://github.com/grafana/grafana/releases
    image: grafana/grafana:11.3.0
    container_name: grafana
    #command:
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - grafana-data:/var/lib/grafana
      - ../config/grafana/provisioning:/etc/grafana/provisioning #https://grafana.com/docs/grafana/latest/administration/provisioning/
    restart: unless-stopped
    ports:
      - 3001:3000
    depends_on:
      - prometheus
      - tempo
      - loki
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-grafana

  jaeger:
    image: jaegertracing/all-in-one:1.65.0
    container_name: jaeger
    ports:
      - 16686:16686
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-jaeger

  jaeger-agent:
    image: jaegertracing/jaeger-agent:1.62.0
    container_name: jaeger-agent
    command: ['--reporter.grpc.host-port=otel-collector:14250']
    networks:
      - opentelemetry
    profiles:
      - otel-all
      - otel-jaeger

networks:
  opentelemetry:
    external: true

volumes:
  loki:
  prometheus:
  tempo:
  grafana-data:

# include:
#   - test-app-docker-compose.yaml
#   - docker-compose-minimal.yaml
